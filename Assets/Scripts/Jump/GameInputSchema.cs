//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Jump/GameInputSchema.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputSchema : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputSchema()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputSchema"",
    ""maps"": [
        {
            ""name"": ""Sheep (player)"",
            ""id"": ""0ab60e1d-f056-424d-a138-07be6e7dd366"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""128fae5d-79ec-48e3-97d0-baedeb76230e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EnterGame"",
                    ""type"": ""Button"",
                    ""id"": ""c99d72f7-4f47-41e4-8371-acff2de4c0d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8edeb39b-2c8e-4909-adc3-1b423efb2ff9"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""joystick"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e95a7267-9437-431f-b413-0968d0b9f582"",
                    ""path"": ""<HID::SNES PC Game Pad    SNES PC Game Pad   >/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""joystick"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""128c1d46-a7dd-472c-92cc-3ddbaf40dfef"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e3ba7128-2acc-476a-bbac-600e84a92c7e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrow keys and space bar"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d900b637-12db-4c53-9d45-03785885b44b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrow keys and space bar"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""63eb0664-3ca9-44ef-891a-decf02e6d19e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrow keys and space bar"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2ccf85f5-8caa-41d0-80db-08dfc52f3544"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrow keys and space bar"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""880d3407-04e6-494f-ba65-552bf351d705"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrow keys and space bar"",
                    ""action"": ""EnterGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c7799fe-791e-44ad-b42f-a29fb85865d9"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrow keys and space bar"",
                    ""action"": ""EnterGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5aa854f5-7de2-4ff9-9b18-0702bb5b7313"",
                    ""path"": ""<HID::SNES PC Game Pad    SNES PC Game Pad   >/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""joystick"",
                    ""action"": ""EnterGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b181d8fd-5a3a-40d9-9e27-c3dd43084eca"",
                    ""path"": ""<Joystick>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""joystick"",
                    ""action"": ""EnterGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ce2394bf-d334-48df-ac9e-d2b0ea40a5a9"",
            ""actions"": [
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9caccc71-6768-4580-b50a-800cf1cb23da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""04abb382-51e0-4a8d-b170-5b43cafc503f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d6ecacd-2715-4939-b92d-f5e03ec53d31"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrow keys and space bar;joystick"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0926117-872e-489b-b43a-3214cbf61da5"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""arrow keys and space bar;joystick"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""arrow keys and space bar"",
            ""bindingGroup"": ""arrow keys and space bar"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""joystick"",
            ""bindingGroup"": ""joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Sheep (player)
        m_Sheepplayer = asset.FindActionMap("Sheep (player)", throwIfNotFound: true);
        m_Sheepplayer_Move = m_Sheepplayer.FindAction("Move", throwIfNotFound: true);
        m_Sheepplayer_EnterGame = m_Sheepplayer.FindAction("EnterGame", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Sheep (player)
    private readonly InputActionMap m_Sheepplayer;
    private ISheepplayerActions m_SheepplayerActionsCallbackInterface;
    private readonly InputAction m_Sheepplayer_Move;
    private readonly InputAction m_Sheepplayer_EnterGame;
    public struct SheepplayerActions
    {
        private @GameInputSchema m_Wrapper;
        public SheepplayerActions(@GameInputSchema wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Sheepplayer_Move;
        public InputAction @EnterGame => m_Wrapper.m_Sheepplayer_EnterGame;
        public InputActionMap Get() { return m_Wrapper.m_Sheepplayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SheepplayerActions set) { return set.Get(); }
        public void SetCallbacks(ISheepplayerActions instance)
        {
            if (m_Wrapper.m_SheepplayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_SheepplayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_SheepplayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_SheepplayerActionsCallbackInterface.OnMove;
                @EnterGame.started -= m_Wrapper.m_SheepplayerActionsCallbackInterface.OnEnterGame;
                @EnterGame.performed -= m_Wrapper.m_SheepplayerActionsCallbackInterface.OnEnterGame;
                @EnterGame.canceled -= m_Wrapper.m_SheepplayerActionsCallbackInterface.OnEnterGame;
            }
            m_Wrapper.m_SheepplayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @EnterGame.started += instance.OnEnterGame;
                @EnterGame.performed += instance.OnEnterGame;
                @EnterGame.canceled += instance.OnEnterGame;
            }
        }
    }
    public SheepplayerActions @Sheepplayer => new SheepplayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Point;
    private readonly InputAction m_UI_Click;
    public struct UIActions
    {
        private @GameInputSchema m_Wrapper;
        public UIActions(@GameInputSchema wrapper) { m_Wrapper = wrapper; }
        public InputAction @Point => m_Wrapper.m_UI_Point;
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Point.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_arrowkeysandspacebarSchemeIndex = -1;
    public InputControlScheme arrowkeysandspacebarScheme
    {
        get
        {
            if (m_arrowkeysandspacebarSchemeIndex == -1) m_arrowkeysandspacebarSchemeIndex = asset.FindControlSchemeIndex("arrow keys and space bar");
            return asset.controlSchemes[m_arrowkeysandspacebarSchemeIndex];
        }
    }
    private int m_joystickSchemeIndex = -1;
    public InputControlScheme joystickScheme
    {
        get
        {
            if (m_joystickSchemeIndex == -1) m_joystickSchemeIndex = asset.FindControlSchemeIndex("joystick");
            return asset.controlSchemes[m_joystickSchemeIndex];
        }
    }
    public interface ISheepplayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnEnterGame(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnPoint(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
